// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: application.proto

package consensus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Application_Handshake_FullMethodName    = "/consensus.v1.Application/Handshake"
	Application_ProposeData_FullMethodName  = "/consensus.v1.Application/ProposeData"
	Application_ValidateData_FullMethodName = "/consensus.v1.Application/ValidateData"
	Application_FinalizeData_FullMethodName = "/consensus.v1.Application/FinalizeData"
)

// ApplicationClient is the client API for Application service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationClient interface {
	Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error)
	ProposeData(ctx context.Context, in *ProposeDataRequest, opts ...grpc.CallOption) (*ProposeDataResponse, error)
	ValidateData(ctx context.Context, in *ValidateDataRequest, opts ...grpc.CallOption) (*ValidateDataResponse, error)
	FinalizeData(ctx context.Context, in *FinalizeDataRequest, opts ...grpc.CallOption) (*FinalizeDataResponse, error)
}

type applicationClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationClient(cc grpc.ClientConnInterface) ApplicationClient {
	return &applicationClient{cc}
}

func (c *applicationClient) Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*HandshakeResponse, error) {
	out := new(HandshakeResponse)
	err := c.cc.Invoke(ctx, Application_Handshake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) ProposeData(ctx context.Context, in *ProposeDataRequest, opts ...grpc.CallOption) (*ProposeDataResponse, error) {
	out := new(ProposeDataResponse)
	err := c.cc.Invoke(ctx, Application_ProposeData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) ValidateData(ctx context.Context, in *ValidateDataRequest, opts ...grpc.CallOption) (*ValidateDataResponse, error) {
	out := new(ValidateDataResponse)
	err := c.cc.Invoke(ctx, Application_ValidateData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) FinalizeData(ctx context.Context, in *FinalizeDataRequest, opts ...grpc.CallOption) (*FinalizeDataResponse, error) {
	out := new(FinalizeDataResponse)
	err := c.cc.Invoke(ctx, Application_FinalizeData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationServer is the server API for Application service.
// All implementations must embed UnimplementedApplicationServer
// for forward compatibility
type ApplicationServer interface {
	Handshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error)
	ProposeData(context.Context, *ProposeDataRequest) (*ProposeDataResponse, error)
	ValidateData(context.Context, *ValidateDataRequest) (*ValidateDataResponse, error)
	FinalizeData(context.Context, *FinalizeDataRequest) (*FinalizeDataResponse, error)
	mustEmbedUnimplementedApplicationServer()
}

// UnimplementedApplicationServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationServer struct {
}

func (UnimplementedApplicationServer) Handshake(context.Context, *HandshakeRequest) (*HandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedApplicationServer) ProposeData(context.Context, *ProposeDataRequest) (*ProposeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeData not implemented")
}
func (UnimplementedApplicationServer) ValidateData(context.Context, *ValidateDataRequest) (*ValidateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateData not implemented")
}
func (UnimplementedApplicationServer) FinalizeData(context.Context, *FinalizeDataRequest) (*FinalizeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeData not implemented")
}
func (UnimplementedApplicationServer) mustEmbedUnimplementedApplicationServer() {}

// UnsafeApplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationServer will
// result in compilation errors.
type UnsafeApplicationServer interface {
	mustEmbedUnimplementedApplicationServer()
}

func RegisterApplicationServer(s grpc.ServiceRegistrar, srv ApplicationServer) {
	s.RegisterService(&Application_ServiceDesc, srv)
}

func _Application_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Application_Handshake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Handshake(ctx, req.(*HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_ProposeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).ProposeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Application_ProposeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).ProposeData(ctx, req.(*ProposeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_ValidateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).ValidateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Application_ValidateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).ValidateData(ctx, req.(*ValidateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_FinalizeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).FinalizeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Application_FinalizeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).FinalizeData(ctx, req.(*FinalizeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Application_ServiceDesc is the grpc.ServiceDesc for Application service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Application_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consensus.v1.Application",
	HandlerType: (*ApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _Application_Handshake_Handler,
		},
		{
			MethodName: "ProposeData",
			Handler:    _Application_ProposeData_Handler,
		},
		{
			MethodName: "ValidateData",
			Handler:    _Application_ValidateData_Handler,
		},
		{
			MethodName: "FinalizeData",
			Handler:    _Application_FinalizeData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application.proto",
}
