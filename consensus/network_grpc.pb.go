// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: network.proto

package consensus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Receiver_ReceiveProposal_FullMethodName = "/consensus.v1.Receiver/ReceiveProposal"
	Receiver_ReceiveVote_FullMethodName     = "/consensus.v1.Receiver/ReceiveVote"
)

// ReceiverClient is the client API for Receiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiverClient interface {
	ReceiveProposal(ctx context.Context, in *ReceiveProposalRequest, opts ...grpc.CallOption) (*ReceiveProposalResponse, error)
	ReceiveVote(ctx context.Context, in *ReceiveVoteRequest, opts ...grpc.CallOption) (*ReceiveVoteResponse, error)
}

type receiverClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiverClient(cc grpc.ClientConnInterface) ReceiverClient {
	return &receiverClient{cc}
}

func (c *receiverClient) ReceiveProposal(ctx context.Context, in *ReceiveProposalRequest, opts ...grpc.CallOption) (*ReceiveProposalResponse, error) {
	out := new(ReceiveProposalResponse)
	err := c.cc.Invoke(ctx, Receiver_ReceiveProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverClient) ReceiveVote(ctx context.Context, in *ReceiveVoteRequest, opts ...grpc.CallOption) (*ReceiveVoteResponse, error) {
	out := new(ReceiveVoteResponse)
	err := c.cc.Invoke(ctx, Receiver_ReceiveVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiverServer is the server API for Receiver service.
// All implementations must embed UnimplementedReceiverServer
// for forward compatibility
type ReceiverServer interface {
	ReceiveProposal(context.Context, *ReceiveProposalRequest) (*ReceiveProposalResponse, error)
	ReceiveVote(context.Context, *ReceiveVoteRequest) (*ReceiveVoteResponse, error)
	mustEmbedUnimplementedReceiverServer()
}

// UnimplementedReceiverServer must be embedded to have forward compatible implementations.
type UnimplementedReceiverServer struct {
}

func (UnimplementedReceiverServer) ReceiveProposal(context.Context, *ReceiveProposalRequest) (*ReceiveProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveProposal not implemented")
}
func (UnimplementedReceiverServer) ReceiveVote(context.Context, *ReceiveVoteRequest) (*ReceiveVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveVote not implemented")
}
func (UnimplementedReceiverServer) mustEmbedUnimplementedReceiverServer() {}

// UnsafeReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiverServer will
// result in compilation errors.
type UnsafeReceiverServer interface {
	mustEmbedUnimplementedReceiverServer()
}

func RegisterReceiverServer(s grpc.ServiceRegistrar, srv ReceiverServer) {
	s.RegisterService(&Receiver_ServiceDesc, srv)
}

func _Receiver_ReceiveProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).ReceiveProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receiver_ReceiveProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).ReceiveProposal(ctx, req.(*ReceiveProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receiver_ReceiveVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).ReceiveVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Receiver_ReceiveVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).ReceiveVote(ctx, req.(*ReceiveVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Receiver_ServiceDesc is the grpc.ServiceDesc for Receiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Receiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consensus.v1.Receiver",
	HandlerType: (*ReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveProposal",
			Handler:    _Receiver_ReceiveProposal_Handler,
		},
		{
			MethodName: "ReceiveVote",
			Handler:    _Receiver_ReceiveVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}

const (
	Sender_BroadcastProposal_FullMethodName = "/consensus.v1.Sender/BroadcastProposal"
	Sender_BroadcastVote_FullMethodName     = "/consensus.v1.Sender/BroadcastVote"
)

// SenderClient is the client API for Sender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SenderClient interface {
	BroadcastProposal(ctx context.Context, in *BroadcastProposalRequest, opts ...grpc.CallOption) (*BroadcastProposalResponse, error)
	BroadcastVote(ctx context.Context, in *BroadcastVoteRequest, opts ...grpc.CallOption) (*BroadcastVoteResponse, error)
}

type senderClient struct {
	cc grpc.ClientConnInterface
}

func NewSenderClient(cc grpc.ClientConnInterface) SenderClient {
	return &senderClient{cc}
}

func (c *senderClient) BroadcastProposal(ctx context.Context, in *BroadcastProposalRequest, opts ...grpc.CallOption) (*BroadcastProposalResponse, error) {
	out := new(BroadcastProposalResponse)
	err := c.cc.Invoke(ctx, Sender_BroadcastProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderClient) BroadcastVote(ctx context.Context, in *BroadcastVoteRequest, opts ...grpc.CallOption) (*BroadcastVoteResponse, error) {
	out := new(BroadcastVoteResponse)
	err := c.cc.Invoke(ctx, Sender_BroadcastVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SenderServer is the server API for Sender service.
// All implementations must embed UnimplementedSenderServer
// for forward compatibility
type SenderServer interface {
	BroadcastProposal(context.Context, *BroadcastProposalRequest) (*BroadcastProposalResponse, error)
	BroadcastVote(context.Context, *BroadcastVoteRequest) (*BroadcastVoteResponse, error)
	mustEmbedUnimplementedSenderServer()
}

// UnimplementedSenderServer must be embedded to have forward compatible implementations.
type UnimplementedSenderServer struct {
}

func (UnimplementedSenderServer) BroadcastProposal(context.Context, *BroadcastProposalRequest) (*BroadcastProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastProposal not implemented")
}
func (UnimplementedSenderServer) BroadcastVote(context.Context, *BroadcastVoteRequest) (*BroadcastVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastVote not implemented")
}
func (UnimplementedSenderServer) mustEmbedUnimplementedSenderServer() {}

// UnsafeSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SenderServer will
// result in compilation errors.
type UnsafeSenderServer interface {
	mustEmbedUnimplementedSenderServer()
}

func RegisterSenderServer(s grpc.ServiceRegistrar, srv SenderServer) {
	s.RegisterService(&Sender_ServiceDesc, srv)
}

func _Sender_BroadcastProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderServer).BroadcastProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sender_BroadcastProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderServer).BroadcastProposal(ctx, req.(*BroadcastProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sender_BroadcastVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderServer).BroadcastVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sender_BroadcastVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderServer).BroadcastVote(ctx, req.(*BroadcastVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sender_ServiceDesc is the grpc.ServiceDesc for Sender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consensus.v1.Sender",
	HandlerType: (*SenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastProposal",
			Handler:    _Sender_BroadcastProposal_Handler,
		},
		{
			MethodName: "BroadcastVote",
			Handler:    _Sender_BroadcastVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}
