syntax = "proto3";

package consensus.v1;
option go_package = "github.com/cmwaters/halo/consensus";

import "consensus.proto";

// Receiver is implemented by the consensus engine. The networking
// layer is responsible for calling the `Receive` method in order
// to pass consensus messages from another peer
service Receiver {
    rpc ReceiveProposal(ReceiveProposalRequest) returns (ReceiveProposalResponse);
    rpc ReceiveVote(ReceiveVoteRequest) returns (ReceiveVoteResponse);
}

// Sender is functionality provided by the networking layer
// that allows the consensus engine to gossip votes, proposals
// and payloads to all other nodes within the network
service Sender {
    rpc BroadcastProposal(BroadcastProposalRequest) returns (BroadcastProposalResponse);
    rpc BroadcastVote(BroadcastVoteRequest) returns (BroadcastVoteResponse);
}

message ReceiveProposalRequest {
    State state = 1;
}

message ReceiveProposalResponse {
    Proposal proposal = 1;
}

message ReceiveVoteRequest {
    State state = 1;
}

message ReceiveVoteResponse {
    Vote vote = 1;
}

message BroadcastProposalRequest {
    Proposal proposal = 1;
}

message BroadcastProposalResponse {}

message BroadcastVoteRequest {
    Vote vote = 1;
}

message BroadcastVoteResponse {}







