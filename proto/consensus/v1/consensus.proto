syntax = "proto3";

package consensus.v1;
option go_package = "github.com/cmwaters/halo/consensus";

import "google/protobuf/duration.proto";

// State is the current state of the consensus engine
message State {
    uint64 height = 1;
    uint32 round = 2;
    // decided means the engine has made a deicision for that round and is
    // in the async period as it waits for the decisions of others to arrive
    // before being able to progress to the next round
    bool decided = 3;
}

// Proposal is the value, v, proposed by the proposer in any given round
message Proposal {
    uint64 height = 1;
    uint32 round = 2;
    // this is the signature from the proposer of the value
    bytes signature = 3;
    // the value itself
    bytes data = 4;
}

message Vote {
    Type type = 1;
    uint64 height = 2;
    uint32 round = 3;
    // a voter must vote for a proposal in one of the rounds in the height
    uint32 proposal_round = 4;
    // validators are ordered in a set by voting power. Only the index is necessary
    // to retrieve the validators public key
    uint32 member_index = 5;
    bytes signature = 6;

    enum Type {
        UNKNOWN = 0;
        SIGNAL = 1;
        COMMIT = 2;
    }
}

// SignatureMessage is the unique representation of both vote and proposal. 
// The bytes of this become the message that the signer signs over.
message SignatureMessage {
    Type type = 1;
    sfixed64 height = 2;
    sfixed32 round = 3;
    string namespace = 4;
    // the hash of the data present in the proposal
    bytes data_digest = 5;

    enum Type {
        UNKNOWN = 0;
        SIGNAL = 1;
        COMMIT = 2;
        PROPOSE = 32;
    }
}

message MemberSet {
    repeated Member members = 1;
}

message Member {
    bytes public_key = 1;
    uint32 voting_power = 2; 
    int64 proposer_priority = 3;
}

message Parameters {
    google.protobuf.Duration round_timeout = 1;
    google.protobuf.Duration round_timeout_delta = 2;
}