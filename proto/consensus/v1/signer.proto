syntax = "proto3";

package consensus.v1;
option go_package = "github.com/cmwaters/halo/consensus";

// Signer is a service that securely manages a nodes private key
// and signs votes and proposals for the consensus engine.
// 
// The signer should ensure that the node never double signs. This
// usually means implementing a high-water mark tracking the height,
// round and type of vote. 
service Signer {
    rpc Sign(SignRequest) returns (SignResponse);
    rpc Handshake(SignerHandshakeRequest) returns (SignerHandshakeResponse);
}

message SignRequest {
    Type type = 1;
    enum Type {
        UNKNOWN = 0;
        SIGNAL = 1;
        COMMIT = 2;
        PROPOSE = 32;
    }
    
    uint64 height = 2;
    uint32 round = 3;
    // proposal refers the the round that the proposal that the vote is for
    // was proposed in. In the case this is of type "PROPOSE", it should
    // always match the round number. As it's not possible to vote in a
    // a later round: proposal <= round
    uint32 proposal = 4;
    // the raw encoded bytes to be signed over. It is a combination of
    // - namespace
    // - height
    // - round
    // - hash of the proposal data
    bytes message = 5;
}

message SignResponse {
    // the signature as signed over the message provided in the request
    bytes signature = 1;

    // The consensus engine, which is not responsible for persistence, is unable
    // to know if it has already signed a vote / proposal for that height / round. This is
    // also relevant in the case of several consensus engines depending on a single 
    // signer. Persistence is thus placed on the signer. 
    //
    // To communicate that the signer has already signed a vote, it should return
    // the proposal it instead signed along with the correponding signature. If there
    // was no prior vote at this height and round, the signer should return the same
    // proposal value in the request
    uint32 proposal = 2;

    // To communicate that the signer has already signed a proposal at that height
    // and round that has a different "message", it should return true here.
    // This will make the consensus engine abort the current operation. 
    bool abort = 3;
}

message SignerHandshakeRequest {
    uint64 height = 1;
    uint32 round = 2;
    uint32 version = 3;
    string namespace = 4;
}

message SignerHandshakeResponse {
    bytes pub_key = 1;
}