syntax = "proto3";

package consensus;
option go_package = "github.com/cmwaters/consensus";

// Receiver is implemented by the consensus engine. The networking
// layer is responsible for calling the `Receive` method in order
// to pass consensus messages from another peer
service Receiver {
    rpc Receive(ReceiveRequest) returns (ReceiveResponse);
}

// Sender is functionality provided by the networking layer
// that allows the consensus engine to gossip votes, proposals
// and payloads to all other nodes within the network
service Sender {
    rpc Broadcast(BroadcastRequest) returns (BroadcastResponse);
}

message ReceiveRequest {
    Msg msg = 1;
}

message ReceiveResponse {
    uint64 height = 1;
    uint32 round = 2;
    Step step = 3;

    enum Step {
        UNKNOWN = 0;
        PROPOSE = 1;
        PREVOTE = 2;
        PRECOMMIT = 3;
        COMMIT = 4;
    }
}

message BroadcastRequest {
    Msg msg = 1;
}

message BroadcastResponse {}

message Msg {
    oneof sum {
        Payload payload = 1; 
        Vote vote = 2;
    }
}

// Payload is the value, v, proposed by the proposer in any given round
message Payload {
    uint64 height = 1;
    uint32 round = 2;
    // this is the signature from the proposer of this payload
    bytes signature = 3;
    repeated bytes data = 4;
}

message Vote {
    Type type = 1;
    uint64 height = 2;
    uint32 round = 3;
    // a voter may refer to a payload from a previous round that the voter is
    // locked on. This is used to find out the payload_id that the signature
    // refers to.
    uint32 reference_round = 4;
    // validators are ordered in a set by voting power. Only the index is necessary
    // to retrieve the validators public key
    uint32 validator_index = 5;
    bytes signature = 6;

    enum Type {
        UNKNOWN = 0;
        PREVOTE = 1;
        PRECOMMIT = 2;
    }
}





